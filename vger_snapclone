#!/bin/sh

# Backup procedure
#   No activity on original: see vger_daily
#   Create snapshot of original: this script
#   Create clone from snapshot: this script
#   Because clone properties aren't inherited from snapshot, preserve original
#	properties in a file called zfs.properties at root of the clone: this
#	script
#   Copy clone to tape: see NetBackup policies VgerDay and VgerEve
#   Delete clone and snapshot: this script
# Restore procedure
#   If snapshot is online, roll back (zfs rollback)
#   If snapshot is not online
#	If clone is online
#	    Promote it
#	    Mount it on original mount point
#	If clone is not online 
#	    Recreate and mount it
#	    Restore from tape to new file system: see NetBackup
#	    Set properties listed in zfs.properties
#	Delete zfs.properties at root of file system

hostname=`hostname`			# Solaris hostname for this host
case "$hostname" in
collins)
    max=1	# Keep max this many pairs of snapshots and their clones
    ;;
wells)
    max=1	# Keep max this many pairs of snapshots and their clones
    ;;
*)
    exit
    ;;
esac

# YYYYmmdd_HHMM where mm=01..12 dd=01..31 HH=00..23 MM=00..59
timestamp=`date "+%Y%m%d_%H%M"`

# /sbin is missing from PATH when this script is called by cron
zfs=/sbin/zfs

#-----------------#
#-- Procedures ---#
#-----------------#

_create_backup_dir()
{
    if [ ! -d $backup_dir ]; then
	$zfs create -o mountpoint=$backup_dir $volume
	$zfs set readonly=off $volume
    fi
}

_delete_old()
{
    # Get list of clones, oldest on top
    # For example
    #   zarchive-slow/collins-archive/backup2/collins_oracle_oradata_VGER_arch_20160326_1448
    #   zslow/collins-data/backup/collins_m1_20100710_1512
    #   zslow/collins-data/backup/collins_m1_20100711_1512
    #   zslow/collins-data/backup/collins_oracle_20100710_1512
    #   zslow/collins-data/backup/collins_oracle_20100711_1512
    #   zslow/collins-data/backup/collins_oracle_oradata_20100710_1512
    #   zslow/collins-data/backup/collins_oracle_oradata_20100711_1512
    clones=`$zfs list -r -o name "$volume" | grep "${hostname}_${subdir_noslash}_2" | sort`

    # Be careful when counting number of clones:
    #   `echo ""    | wc -l` equals 1
    #   `echo "a\n" | wc -l` equals 2
    if [ -z "$clones" ]; then
	cnt=0
    else
	cnt=`echo "$clones" | wc -l`
    fi

    while [ $cnt -ge $max ]; do
	# Oldest clone is on top
	clone=`echo "$clones" | head -1`

	# Use timestamp at the end of clone name to learn snapshot name
	# For example
	#   NAME                                                MOUNTPOINT
	#   zslow/collins-data/backup/collins_m1_20100710_1512  /backup/collins_m1_20100710_1512
	#   zslow/collins-data/m1@20100710_1512                 -
	timestamp_clone=`echo $clone | sed "s/^.*${subdir_noslash}_//"`
	snapshot=${src}@$timestamp_clone

	# Destroy clone before snapshot
	echo "    \c"; $zfs list -H -o name $clone
	$zfs destroy $clone

	# Destroy snapshot after clone
	echo "    \c"; $zfs list -H -o name  $snapshot
	$zfs destroy $snapshot

	cnt=`expr $cnt - 1`
	clones=`echo "$clones" | tail -$cnt`
    done
}

_create_new()
{
    # First create names for each snapshot and its clone
    # For example, /m1 with one snapshot and clone
    #   NAME                                                MOUNTPOINT
    #   zslow/collins-data/m1                               /m1
    #   zslow/collins-data/m1@20100710_1612                 -
    #   zslow/collins-data/backup/collins_m1_20100710_1612  /backup/collins_m1_20100710_1612
    snapshot=${src}@$timestamp
    clone=$volume/${hostname}_${subdir_noslash}_$timestamp

    # Create snapshot
    $zfs snapshot $snapshot
    echo "    \c"; $zfs list -H -o name $snapshot

    # Create clone from snapshot
    $zfs clone $snapshot $clone
    echo "    \c"; $zfs list -H -o name $clone

    # Clone doesn't inherit properties from snapshot: whatever was set in
    #   original must be explicitly set in clone
    # For example
    #   NAME			PROPERTY	VALUE	SOURCE
    #   zslow/collins-data/m1	setuid		off	local
    # To set parent's value
    #   zfs inherit <property> <dataset>
    # To set non-default value
    #   zfs set <property>=<value> <dataset>
    # NetBackup doesn't include properties in backup
    # For now, instead of querying original and setting properties in clone,
    #   save original properties in a file belonging to the clone
    $zfs get -r -s local all $src > \
	`$zfs get -H -o value mountpoint $clone`/zfs.properties

    # Don't let anybody modify the clone
    $zfs set readonly=on $clone

    # Prevent clone from being mounted again at boot
    # NetBackup will unmount clone after it's on tape
    # See /usr/openv/netbackup/bin/bp*notify.VgerDay*
    $zfs set canmount=noauto $clone
}

_delete_old_create_new()
{
    # For this mountpoint, get its ZFS volume name
    src=`$zfs list -H -o name /$subdir 2>/dev/null`
    if [ -z "$src" ]; then
	# /$subdir is not a mountpoint: try next one
	continue
    fi

    # Clone name will incorporate subdir name, but with '_' instead of '/'
    # For example
    #   m1                       -> m1
    #   oracle                   -> oracle
    #   oracle/oradata           -> oracle_oradata
    #   oracle/oradate/VGER/arch -> oracle_oradata_VGER_arch
    subdir_noslash=`echo $subdir | sed 's/\//_/g'`

    echo "`date` Delete for /$subdir"
    _delete_old

    echo "`date` Create for /$subdir"
    _create_new
}

#------------#
#--- Main ---#
#------------#

# Snapshots and clones must stay in the same pool as the original

# First pool is zarchive-slow
# Test archived redo logs are in zarchive-slow, under this volume
#   zarchive-slow/collins-archive
# NetBackup will look for the clone in /backup2
# Make sure the NetBackup directory exists and is mounted
#   NAME                                   MOUNTPOINT
#   zslow-archive/collins-archive/backup2  /backup2
backup_dir=/backup2
volume=`$zfs list -H -o name | grep "${hostname}-archive$"`$backup_dir
_create_backup_dir

# Make snapshots and clones for these mountpoints
#   NAME                               MOUNTPOINT
#   zarchive-slow/collins-archive/VGER /oracle/oradata/VGER/arch
# Each snapshot name will contain the time created
#   zarchive-slow/collins-archive/VGER@timestamp
# Name each clone for its host, mount point and time created
#   zarchive-slow/collins-archive/backup2/collins_oracle_oradata_VGER_arch_timestamp
for subdir in oracle/oradata/VGER/arch; do
    _delete_old_create_new
done

# Second pool is zslow
# Test Voyager data is in zslow, under this volume
#   zslow/collins-data
# NetBackup will look for the clone in /backup
# Make sure the NetBackup directory exists and is mounted
#   NAME                               MOUNTPOINT
#   zslow/collins-data/backup          /backup
backup_dir=/backup
volume=`$zfs list -H -o name | grep "${hostname}-data$"`$backup_dir
_create_backup_dir

# Make snapshots and clones for these mountpoints
#   NAME                               MOUNTPOINT
#   zslow/collins-data/m1              /m1
#   zslow/collins-data/oracle          /oracle
#   zslow/collins-data/oracle/oradata  /oracle/oradata
# Each snapshot name will contain the time created
#   zslow/collins-data/m1@timestamp
#   zslow/collins-data/oracle@timestamp
#   zslow/collins-data/oracle/oradata@timestamp
# Name each clone for its host, mount point and time created
#   zslow/collins-data/backup/collins_m1_timestamp
#   zslow/collins-data/backup/collins_oracle_timestamp
#   zslow/collins-data/backup/collins_oracle_oradata_timestamp
for subdir in m1 oracle oracle/oradata; do
    _delete_old_create_new
done
